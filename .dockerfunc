#!/usr/local/bin/zsh
# Bash wrappers for docker run commands

export DOCKER_REPO_PREFIX=jess
#
# Helper Functions
#
dbash(){
  docker exec -it $1 bash -c "stty cols $COLUMNS rows $LINES && bash";
}

dsh(){
  docker exec -it $1 bash -c "stty cols $COLUMNS rows $LINES && bash";
}
dcleanup() {
  for container in $(docker ps -aq 2>/dev/null); do
    $(docker rm "$container" 2>/dev/null)
  done
  for volume in $(docker ps --filter status=exited -q 2>/dev/null); do
    $(docker rm -v "$volume" 2>/dev/null)
  done
  for image in $(docker images --filter dangling=true -q 2>/dev/null); do
    $(docker rmi "$image" 2>/dev/null)
  done
}

del_stopped() {
  local name=$1
  local state
  state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

  if [[ "$state" == "false" ]]; then
    docker rm "$name"
  fi
}

rmctr() {
  # shellcheck disable=SC2068
  docker rm -f $@ 2>/dev/null || true
}

dstartall() {
  docker start $(docker ps -a -q)
}

dstopall() {
  docker stop $(docker ps -a -q)
}

drmi() {
  docker rm $(docker ps -a -q)
}

create_kali_container() {

  install=(
    "apt-get --yes update; "
    "apt-get --yes dist-upgrade; "
    "apt-get --yes autoremove; "
    "apt-get --yes clean; "
    "apt-get --yes install kali-tools-top10; "
    "apt-get --yes install kali-tools-information-gathering; "
    "apt-get --yes install kali-tools-social-engineering; "
    "apt-get --yes install kali-tools-web; "
    "apt-get --yes install vim; "
    "apt-get --yes install man-db; "
    "apt-get --yes install exploitdb; "
  )

  docker pull kalilinux/kali-rolling

  echo "Installing kali tools..."
  docker run -it --name kali \
    kalilinux/kali-rolling \
    /bin/bash -c "$(echo $install)"

  echo "Committing container to image"
  docker commit kali kali
  docker container rm -f kali
}


kali() {
  # Attach bash shell to network
  docker run --rm -it \
    --privileged \
    --mount src=kali-root,dst=/root \
    --mount src=kali-postgres,dst=/var/lib/postgresql \
    --name kali \
    kali /bin/bash
}

_neo4j_container() {
  echo "$(docker container ls -q --filter 'name=neo4j')"
}

local-cypher-shell() {
docker exec $run_options \
  $(docker container ls | grep 'neo4j' | awk '{print $1}') \
  cypher-shell -u neo4j -p $NEO4J_PASSWORD -d logicgate-localhost  "$@"
}

dbreset() {
  local-cypher-shell -d system "drop database \`logicgate-localhost\`;"
  local-cypher-shell -d system "create database \`logicgate-localhost\`;"
}

function macos-x11() {
  ip=$(ifconfig | grep -E 'inet.*broad' | awk  '{ print $2; }')
  open -a XQuartz &
  #Find good port
  p=0;for port in $(seq 0 10);do echo "Check :$((6000+$p)) (:$p)";  nc -w0 127.0.0.1 $((6000+$p)) && DISPLAY="$IP:$p"; let p=p+1;  done;
  #add xhost
  echo "DISPLAY IS $DISPLAY";
  /opt/X11/bin/xhost + $IP

  export DISPLAY=$DISPLAY
}

signal() {
  ip=$(ifconfig | grep 'inet ' | grep -v '127.0.0.1' | head -1|awk '{print $2}')
  socat TCP-LISTEN:6001,reuseaddr,fork UNIX-CLIENT:\"$DISPLAY\" &
  SOCAT_PGM_PID=$!
  docker run --rm \
    -e HOME \
    -e XAUTHORITY=/tmp/xauth -v ~/.Xauthority:/tmp/xauth \
    -e DISPLAY=$_my_ip:1 --net host -v $HOME:$HOME \
    ${1+"$@"} kayvan/signal
  kill $SOCAT_PGM_PID
}

volume(){
  docker run -it --rm \
    --mount source=$1,destination=/data \
    ubuntu
  }
