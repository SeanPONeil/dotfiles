#!/bin/bash
# Bash wrappers for docker run commands

export DOCKER_REPO_PREFIX=jess
#
# Helper Functions
#
dbash(){
  docker exec -it $1 bash -c "stty cols $COLUMNS rows $LINES && bash";
}

dsh(){
  docker exec -it $1 sh -c "stty cols $COLUMNS rows $LINES && sh";
}
dcleanup() {
  for container in $(docker ps -aq 2>/dev/null); do
    $(docker rm "$container" 2>/dev/null)
  done
  for volume in $(docker ps --filter status=exited -q 2>/dev/null); do
    $(docker rm -v "$volume" 2>/dev/null)
  done
  for image in $(docker images --filter dangling=true -q 2>/dev/null); do
    $(docker rmi "$image" 2>/dev/null)
  done
}

del_stopped() {
  local name=$1
  local state
  state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

  if [[ "$state" == "false" ]]; then
    docker rm "$name"
  fi
}

rmctr() {
  # shellcheck disable=SC2068
  docker rm -f $@ 2>/dev/null || true
}

dstopall() {
  for container in $(docker ps -q 2>/dev/null); do
    docker stop $container 2>/dev/null
  done
}

drmi() {
  for container in $(docker ps -aq 2>/dev/null); do
    docker rm $container 2>/dev/null
  done
}

create_kali_container() {

  install=(
    "apt-get --yes update; "
    "apt-get --yes dist-upgrade; "
    "apt-get --yes autoremove; "
    "apt-get --yes clean; "
    "apt-get --yes install kali-tools-top10; "
    "apt-get --yes install kali-tools-information-gathering; "
    "apt-get --yes install kali-tools-social-engineering; "
    "apt-get --yes install kali-tools-web; "
    "apt-get --yes install vim; "
    "apt-get --yes install man-db; "
    "apt-get --yes install exploitdb; "
  )

  docker pull kalilinux/kali-rolling

  echo "Installing kali tools..."
  docker run -it --name kali \
    kalilinux/kali-rolling \
    /bin/bash -c "$(echo $install)"

  echo "Committing container to image"
  docker commit kali kali
  docker container rm -f kali
}


kali() {
  # Attach bash shell to network
  docker run --rm -it \
    --privileged \
    --mount src=kali-root,dst=/root \
    --mount src=kali-postgres,dst=/var/lib/postgresql \
    --name kali \
    kali /bin/bash
}

function cypher-shell() {
docker exec -it \
  $(docker container ls | grep 'neo4j' | awk '{print $1}') \
  cypher-shell -u neo4j -p $NEO4J_PASSWORD -d logicgate-localhost  "$@"
}

cypher-shell-system() {
docker exec -it \
  $(docker container ls | grep 'neo4j' | awk '{print $1}') \
  cypher-shell -u neo4j -p $NEO4J_PASSWORD -d system "$@"
}

dbreset() {
  cypher-shell-system "drop database \`logicgate-localhost\`;"
  cypher-shell-system "create database \`logicgate-localhost\`;"
}

# volume(){
#   docker run -it --rm \
#     -v $1:/$1 \
#     --log-driver none \
#     bash bash -c "apk add --no-cache vim; bash"
#   }
